'''
1. Прочитайте офіційну специфікацію формату та приклади - https://docs.python.org/3.4/library/string.html#formatspec
'''
# DONE

'''
2. Прочитайте документацію формату дата та час -
https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior 
А краще тут
https://www.w3schools.com/python/python_datetime.asp
https://www.programiz.com/python-programming/time
'''
# DONE

'''
3. Прочитайте цей посібник з функцій
https://docs.python.org/3.7/tutorial/controlflow.html#defining-functions
https://www.w3schools.com/python/python_functions.asp
'''
# DONE

'''
4. Використовуйте модуль часу, щоб порівняти продуктивність «ефективного» методу пошуку простих чисел із 
простою реалізацією (без перерв, тестування за всіма числами тощо). Перевірте кілька діапазонів пошуку простих чисел 
(наприклад, до 100, до 1000 і т.д.) Ефективний метод - будь який математично визначиний підхід обрахунку.
Рекомендую дивитись метод Решето Эратосфена - 
https://uk.wikipedia.org/wiki/%D0%A0%D0%B5%D1%88%D0%B5%D1%82%D0%BE_%D0%95%D1%80%D0%B0%D1%82%D0%BE%D1%81%D1%84%D0%B5%D0%BD%D0%B0
'''
import time
def measure_time(func, *args, **kwargs):
    start = time.time()
    result = func(*args, **kwargs)
    end_time = time.time()
    print(f"Час виконання функції {func.__name__}: {end_time - start:.10f} сек.")
    return result

def simple_prime_search(n):
    prime_numbers = []
    for num in range(2, n + 1):
        is_prime = True
        for i in range(2, num):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            prime_numbers.append(num)
    return prime_numbers

def sieve_eratosthenes(n):
    sieve = [True] * (n + 1)
    sieve[0] = sieve[1] = False
    for i in range(2, int(n ** 0.5) + 1):
        if sieve[i]:
            for j in range(i * i, n + 1, i):
                sieve[j] = False

    prime_numbers = [i for i in range(n + 1) if sieve[i]]
    return prime_numbers

ranges = [100, 1000, 10000]

for n in ranges:
    print(f"\nПошук простих чисел до {n}:")
    print("-" * 50)

    simple_primes = measure_time(simple_prime_search, n)
    print(f"Знайдено {len(simple_primes)} простих чисел")

    sieve_primes = measure_time(sieve_eratosthenes, n)
    print(f"Знайдено {len(sieve_primes)} простих чисел")

    if simple_primes == sieve_primes:
        print("Обидва методи дали однаковий результат +")
    else:
        print("ПОМИЛКА: Результати методів відрізняються!")
