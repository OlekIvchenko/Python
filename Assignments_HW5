import requests
import certifi
from itertools import combinations
from collections import defaultdict

def fetch_data_from_url(url):
    try:
        response = requests.get(url, verify=certifi.where())
        response.raise_for_status()
        return response.text
    except requests.RequestException as e:
        print(f'Failed to retrieve data from URL: {e}')
        return None

def process_orders(data):
    orders = []
    for line in data.split('\n\n'):
        line = line.strip()
        if line:
            order = [product.strip() for product in line.split('@@@')]
            orders.append(order)
    return orders

def count_products(orders):
    product_counts = defaultdict(int)
    for order in orders:
        for product in order:
            product_counts[product] += 1
    return product_counts

def count_product_pairs(orders):
    pair_counts = defaultdict(int)
    for order in orders:
        for pair in combinations(sorted(order), 2):
            pair_counts[pair] += 1
    return pair_counts

def calculate_association_rules(product_counts, pair_counts, min_support, min_confidence):
    rules = []

    for (product1, product2), support in pair_counts.items():
        if support >= min_support:
            confidence1 = (support / product_counts[product1]) * 100
            confidence2 = (support / product_counts[product2]) * 100

            if confidence1 >= min_confidence:
                rules.append((product1, product2, confidence1, support))
            if confidence2 >= min_confidence:
                rules.append((product2, product1, confidence2, support))
    return rules

def analyze_market_basket(url, min_support=15, min_confidence=45):
    data = fetch_data_from_url(url)
    if not data:
        return

    orders = process_orders(data)

    print(f"Length of list = {len(orders)}")

    product_counts = count_products(orders)
    pair_counts = count_product_pairs(orders)

    print(f"Number of unique products = {len(product_counts)}")
    print(f"Found {len(pair_counts)} product pairs from {len(orders)} orders\n")

    rules = calculate_association_rules(product_counts, pair_counts, min_support, min_confidence)
    rules.sort(key=lambda x: (-x[2], -x[3]))

    for product1, product2, confidence, support in rules:
        print(f"{product1} => {product2} ({confidence:.2f}% confidence), {support} support")

url = 'https://drive.google.com/uc?id=1IOPTVq2ooQfZRkF3rAjGkTjRtbotG7FF'
analyze_market_basket(url)
