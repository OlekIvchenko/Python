# Введіть додатне ціле число як вхідні дані (переконайтеся, що воно знаходиться в межах від 1 до 100),
# розрахуйте і виведіть його факторіал.
# Приклад: 5 → 120.
# number = int(input("Input number: "))
# fact = 1
# if 1 <= number <= 100:
#     for i in range(1, number+1):
#         fact *= i
#     print(f'{number} -> {fact}')
# else:
#     print(f'Error 1 < {number} < 100')

# Запросіть у користувача ім'я та його вік, потім розрахуйте і виведіть рік, в якому він досягне 100 років.
# Приклад: "Емма", "20" → "Емма досягне 100 років у 2100 році."
# name = input('Input your name: ')
# age = int(input('Input your age: '))
# year_now = 2024
# result = year_now - age + 100
# print(f'"{name}", "{age}" → "{name} досягне 100 років у {result} році."')

# Користувач вводить чотиризначне число (переконайтеся, що перша цифра не нуль), і виведіть цифру в тисячному розряді.
# Приклад: 2345 → 2.
# number = input("Input number: ")
# if number.isdigit() and number[0] != '0' and len(number) == 4:
#     print(f'{number} -> {number[0]}')
#     int_number = int(number)
#     result = int_number // 1000
#     print(f'{number} -> {result}')
# else:
#     print('Error')

# До заняття 4: "Immutable ordered collections, unordered collections, Union, intersection, difference and symmetric difference, dictionaries, Collection functions, Functions, zip"
#
#
# Задачі на тему Immutable ordered collections:
# 1. Створіть кортеж (tuple) з елементами "apple", "banana", "cherry". Змініть другий елемент на "grape"
# і виведіть змінений кортеж.
# fruits = ("apple", "banana", "cherry")
# print(fruits)
# fruits = fruits[:1] + ('grape',) + fruits[2:]
# print(fruits)
#
# 2. Порівняйте різні способи створення кортежів за допомогою круглих дужок та функції tuple(). Яка різниця між ними?
# fruits = ("apple", "banana", "cherry")
# fruits1 = tuple(["apple", "banana", "cherry"])
# print(fruits)
# print(fruits1)

# 3. Створіть кортеж з числами від 1 до 5 та використайте зрізи (slicing), щоб вивести перші три елементи.
# numbers = range(1,6)
# print(tuple(numbers)[:3])
#
#
# Задачі на тему Unordered collections:
#
#
#
# 1. Створіть множину (set) з числами 1, 2, 3, 4, 5. Додайте число 6 та виведіть множину.
# numbers = set(range(1,6))
# print(numbers)
# numbers.add(6)
# print(numbers)
#
# # 2. Перевірте, чи є елемент 3 у множині, використовуючи оператор in.
# print(3 in numbers)
# print(7 in numbers)
# 3. Знайдіть перетин двох множин: {1, 2, 3, 4} та {3, 4, 5, 6}.
# numbers1 = {1,2,3,4}
# numbers2 = {3,4,5,6}
# print(numbers1.intersection(numbers2))
# print(numbers1 & numbers2 )
#
#
# Задачі на тему Union, intersection, difference і symmetric difference:
#
#
#
# 1. Об'єднайте множини {1, 2, 3} та {3, 4, 5} та виведіть результат.
#
number1 = {1,2,3}
number2 = {3,4,5}
print(number1.union(number2))
print(number1 | number2)
# 2. Знайдіть різницю між множинами {5, 6, 7, 8} та {7, 8, 9, 10}.
number1 = {5,6,7,8}
number2 = {7,8,9,10}
print(number1.difference(number2))
print(number2.difference(number1))
print(number1 - number2)
print(number2 - number1)
# 3. Визначте симетричну різницю між множинами {1, 2, 3, 4} та {3, 4, 5, 6}.
numbers1 = {1, 2, 3, 4}
numbers2 = {3, 4, 5, 6}
print(numbers1.symmetric_difference(numbers2))
print(numbers2.symmetric_difference(numbers1))
print(numbers1 ^ numbers2)
#
#
# Задачі на тему dictionaries:
#
#
#
# 1. Створіть словник (dictionary) з ключами "name" та "age", де значення ключа "name" - ваше ім'я,
# а значення ключа "age" - ваш вік.
#
# 2. Додайте до створеного словника новий ключ "city" зі значенням вашого міста проживання.
#
# 3. Виведіть значення ключа "age" та перевірте, чи існує ключ "gender" у словнику.
#
#
#
# Задачі на тему Collection functions:
#
#
#
# 1. Створіть список чисел від 1 до 10 та знайдіть його суму, максимальне та мінімальне значення.
#
# 2. Перетворіть список строк ["apple", "banana", "cherry"] в одну строку, розділену комами.
#
# 3. Перевірте, чи всі елементи списку [True, False, True, True] є істинними.
#
#
#
# Задачі на тему Functions:
#
#
#
# 1. Напишіть функцію, яка приймає два аргументи (число та степінь) і повертає результат піднесення числа до степеня.
#
# 2. Напишіть функцію, яка приймає список чисел та повертає список тільки з парних чисел.
#
# 3. Напишіть функцію, яка приймає рядок і повертає кількість голосних букв у ньому.
#
#
#
# Задачі на тему zip:
#
#
#
# 1. Об'єднайте два списки [1, 2, 3] та ['a', 'b', 'c'] за допомогою функції zip() і виведіть результат.
#
# 2. За допомогою zip() створіть словник, де ключами будуть елементи списку [1, 2, 3], а значеннями - відповідні елементи списку ['one', 'two', 'three'].
#
# 3. За допомогою zip() та списку індексів створіть список кортежів, де кожен кортеж містить елемент з першого списку та відповідний елемент з другого списку.
#
#
#
#
#
#
#
# До заняття 5: "Multi-file programs, Clean code principles, str functions, formatting, time & datetime, optional function arguments, *, operators"
#
#
# Задачі на тему "Multi-file programs":
#
#
#
# 1. Створіть програму, що складається з головного файлу та модулів. У головному файлі викликайте функції з модулів.
#
# 2. Розбийте існуючу програму на окремі файли за функціональністю. Забезпечте правильний імпорт модулів для коректної роботи програми.
#
# 3. Переробіть проект так, щоб кожен клас був в окремому файлі, а головний файл містив лише імпорти та виклики класів.
#
#
#
# Задачі на тему "Clean code principles":
#
#
#
# 1. Перепишіть функцію так, щоб кожен рядок мав ясне призначення та був добре описаний.
#
# 2. Видаліть непотрібні коментарі та зайвий код з вашого проекту, зберігаючи при цьому зрозумілість.
#
# 3. Перегляньте імена змінних та функцій у вашому коді. Перейменуйте їх так, щоб їх назви були інформативними та зрозумілими.
#
#
#
# Задачі на тему "str functions, formatting":
#
#
#
# 1. Напишіть функцію, яка приймає рядок та повертає його довжину, а також кількість голосних та приголосних літер.
#
# 2. Змініть регістр рядка з великих літер на маленькі та навпаки.
#
# 3. Сформатуйте рядок так, щоб дата була у форматі "dd/mm/yyyy".
#
#
#
# Задачі на тему "time & datetime":
#
#
#
# 1. Напишіть програму, яка визначає, чи є поточний рік високосним.
#
# 2. Створіть функцію, яка приймає дві дати та повертає різницю між ними в днях.
#
# 3. Напишіть програму, яка виводить поточну дату та час у форматі "dd/mm/yyyy hh:mm:ss".
#
#
#
# Задачі на тему "optional function arguments":
#
#
#
# 1. Напишіть функцію, яка приймає два аргументи: число та опціональний параметр, який, якщо вказаний, збільшує число на це значення.
#
# 2. Створіть функцію, яка обчислює площу прямокутника, приймаючи два обов'язкових параметра (довжину та ширину) та один опціональний параметр (коефіцієнт масштабування).
#
# 3. Напишіть функцію, яка обчислює середнє арифметичне значень зі списку чисел, пропускаючи опціональний параметр "вага" для кожного числа.
#
#
#
# Задачі на тему "* and operators":
#
#
#
# 1. Напишіть функцію, яка приймає будь-яку кількість аргументів і виводить їхню суму.
#
# 2. Створіть функцію, яка приймає будь-яку кількість аргументів та виводить словник, де ключами є передані аргументи, а значеннями - їх квадрати.
#
# 3. Реалізуйте функцію, яка приймає словник та виводить його ключі та значення відсортовані за зростанням значень.


# 1. Take an integer number as input and print if it’s
# “Even” or “Odd”.
# 2. Take as inputs sides of rectangular
# and print “Big” if the area is larger than 100,
# otherwise “small”.
# 3. Введіть назву фігури та відповідні параметри
# для того, щоб дізнатись її площу. Виведіть
# напис «Великий», якщо площа більше 100,
# «Маленький», якщо менше. І якщо відповідь від'ємна – «Помилка»
# 4. Take as input two real numbers and an operation
# (“+” or “-” or“/” or “*”) and calculate the result of the operation. Watch for division by zero
# errors!

# 1. Напишіть програму для керування шаховим
# турніром: для кожного з 10 раундів, введіть ім’я
# переможця раунду. В кінці роздрукуйте кожен
# учасник, який отримав принаймні один виграш (друкованим шрифтом ім’я та # виграш), відсортовано за кількістю перемог у порядку
# спадання.

# 2. Напишіть програму для відпрацювання мат. операцій. Поки користувач не хочете вийти, рандомізуйте оператори (+, -, *) і операнди, і
# перевірити відповідь користувача.Після того, як
# користувач вийде, надрукуйте його бали (у %
# скільки переміг/ скільки всього ігор зіграв)

# Спробуйте написати простий, читабельний код за
# допомогою функцій.

# 1. Рахуємо, скільки часу займе підрахунок
# 100000 степеня 2ки.
#
# Спробуйте написати простий, читабельний
# код за допомогою функцій.

# Create an empty 50x50 grid. Place two points
# on the grid and
# fill a straight line between them on the grid.
# Save the
# resulting grid in three formats:
# 1. As a text file (a “map” of the grid)
# 2. As a JSON file
# 3. As a pickle file
# Compare the resulting files.

# Напишіть функцію для отримання
# цілочисельного введення від користувача;
# якщо вхідне значення не є цілим, надрукуйте
# відповідне повідомлення та спробуйте ще раз.

# Візьміть як вхідні дані два рядки: список імен
# студентів, розділених символом “,”, і список
# їхніх кінцевих оцінок (цілі числа), розділених
# “,”.
# Надрукуйте імена всіх учнів, чий підсумковий
# бал був на рівні мінімум 90. Для цієї вправи
# використовуйте якомога менше рядків коду.

# Напишіть рекурсивну функцію для піднесення
# числа до степеня
# ціле число, тобто реалізуйте a ** b, де b є
# цілим числом